"""
Created on Thurs 06 Apr 2023
authors: Adill Al-Ashgar & Max Carter
University of Bristol
Adapted from: Sreenivas Bhattiprolu https://youtu.be/16s3Pi1InPU

Comparing images using ORB/SIFT feature detectors and structural similarity index.

------------------------- ORB (Oriented FAST and Rotated BRIEF) --------------------------------------- 

A measure of similarity between two images that is based on the ORB feature 
detection and description algorithm. ORB is a computer vision algorithm that detects and describes key points (features) 
in an image, and can be used to match corresponding features in different images.

The ORB algorithm detects features by finding the locations in the image where the intensity changes rapidly, and describes
each feature by a binary string that encodes the pattern of intensity changes in a small patch around the feature. 
These binary strings are invariant to rotation and scale, which makes them well-suited for matching corresponding features 
in different images.

ORB similarity is computed by comparing the ORB feature descriptors of two images and computing a score that reflects 
the similarity between the two sets of descriptors. The score is based on the number of matching features and the quality 
of the matches, which is determined by the distance between the feature descriptors in a high-dimensional space.

ORB similarity can be used for various computer vision tasks, such as image retrieval, object recognition, and 3D reconstruction. 
However, it is important to note that ORB similarity is not always the best measure of image similarity, as it may not capture 
all aspects of the visual content of an image, and may be sensitive to changes in lighting, viewpoint, and other factors.


---------------------------------------- SSIM (Structural Similarity Index) -------------------------------------------------

SSIM is a widely used metric for image quality assessment that measures the similarity between two images based on their luminance, 
contrast, and structure. SSIM is often used as a measure of the perceptual quality of an image, and is widely used in image 
and video processing applications.

The SSIM metric works by comparing the structural information of two images, including the luminance, contrast, and structure 
of the image. It computes a score between 0 and 1, with a score of 1 indicating perfect similarity between the two images.

The SSIM metric is based on the concept of the human visual system's ability to detect changes in structure and texture 
in an image. It is designed to take into account the perceptual effects of changes in luminance, contrast, and structure, 
which can be important factors in determining the quality of an image.

SSIM is widely used in various applications, such as image and video compression, image enhancement, and image restoration. 
It is also used in research and development of image and video processing algorithms, as a benchmark for evaluating the quality 
of different algorithms.
"""

"""
These can be used to compare the differences between two 
"""

from skimage.metrics import structural_similarity
import cv2

#Works well with images of different dimensions
def orb_sim(img1, img2):
  # SIFT is no longer available in cv2 so using ORB
  orb = cv2.ORB_create()

  # detect keypoints and descriptors
  kp_a, desc_a = orb.detectAndCompute(img1, None)
  kp_b, desc_b = orb.detectAndCompute(img2, None)

  # define the bruteforce matcher object
  bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    
  #perform matches. 
  matches = bf.match(desc_a, desc_b)
  #Look for similar regions with distance < 50. Goes from 0 to 100 so pick a number between.
  similar_regions = [i for i in matches if i.distance < 50]  
  if len(matches) == 0:
    return 0
  return len(similar_regions) / len(matches)


#Needs images to be same dimensions
def structural_sim(img1, img2):

  sim, diff = structural_similarity(img1, img2, full=True)
  return sim

img00 = cv2.imread('images/monkey_distorted.jpg', 0)
img01 = cv2.imread('images/monkey_rotated.jpg', 0)

img1 = cv2.imread('images/BSE.jpg', 0)  # 714 x 901 pixels
img2 = cv2.imread('images/BSE_noisy.jpg', 0)  # 714 x 901 pixels
img3 = cv2.imread('images/BSE_smoothed.jpg', 0)  # 203 x 256 pixels
img4 = cv2.imread('images/different_img.jpg', 0)  # 203 x 256 pixels

orb_similarity = orb_sim(img1, img3)  #1.0 means identical. Lower = not similar

print("Similarity using ORB is: ", orb_similarity)
#Resize for SSIM
from skimage.transform import resize
img5 = resize(img3, (img1.shape[0], img1.shape[1]), anti_aliasing=True, preserve_range=True)

ssim = structural_sim(img1, img5) #1.0 means identical. Lower = not similar
print("Similarity using SSIM is: ", ssim)