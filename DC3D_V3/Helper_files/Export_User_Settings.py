

import json
# Define a function to create a dictionary from the given settings
def create_settings_dict(filename):
    settings_dict = {
        "dataset_title": dataset_title,
        "model_save_name": model_save_name,
        "xdim": xdim,
        "ydim": ydim,
        "time_dimension": time_dimension,
        "num_epochs": num_epochs,
        "batch_size": batch_size,
        "learning_rate": learning_rate,
        "optim_w_decay": optim_w_decay,
        "latent_dim": latent_dim,
        "fc_input_dim": fc_input_dim,
        "dropout_prob": dropout_prob,
        "reconstruction_threshold": reconstruction_threshold,
        "train_test_split_ratio": train_test_split_ratio,
        "val_set_on": val_set_on,
        "val_test_split_ratio": val_test_split_ratio,
        "loss_vs_sparse_img": loss_vs_sparse_img,
        "loss_function_selection": loss_function_selection,
        "zero_weighting": zero_weighting,
        "nonzero_weighting": nonzero_weighting,
        "fullframe_weighting": fullframe_weighting,
        "signal_points" : signal_points,
        "noise_points" : noise_points,
        "x_std_dev" : x_std_dev,
        "y_std_dev" : y_std_dev,
        "tof_std_dev" : tof_std_dev,
        "start_from_pretrained_model" : start_from_pretrained_model,
        "load_pretrained_optimser" : load_pretrained_optimser,
        "pretrained_model_path" : pretrained_model_path,
        "masking_optimised_binary_norm" : masking_optimised_binary_norm,
        "print_every_other" : print_every_other,
        "plot_or_save" : plot_or_save,
        "num_to_plot" : num_to_plot,
        "save_all_raw_plot_data" : save_all_raw_plot_data,
        "double_precision" : double_precision,
        "shuffle_train_data" : shuffle_train_data,
        "timeout_training" : timeout_training,
        "timeout_time" : timeout_time,
        "record_weights" : record_weights,
        "record_biases" : record_biases,
        "record_activity" : record_activity,
        "compress_activations_npz_output" : compress_activations_npz_output,
        "plot_train_loss" : plot_train_loss,
        "plot_validation_loss" : plot_validation_loss,
        "plot_time_loss" : plot_time_loss,
        "plot_detailed_performance_loss" : plot_detailed_performance_loss,
        "plot_live_time_loss" : plot_live_time_loss,
        "plot_live_training_loss" : plot_live_training_loss,
        "comparative_live_loss" : comparative_live_loss,
        "slide_live_plot_size" : slide_live_plot_size,
        "comparative_loss_titles" : comparative_loss_titles,
        "comparative_loss_paths" : comparative_loss_paths,
        "plot_pixel_threshold_telemetry": plot_pixel_threshold_telemetry,
        "plot_pixel_difference": plot_pixel_difference,  # BROKEN
        "plot_latent_generations": plot_latent_generations,
        "plot_higher_dim": plot_higher_dim,
        "plot_Graphwiz": plot_Graphwiz,
        "print_encoder_debug": print_encoder_debug,
        "print_decoder_debug": print_decoder_debug,
        "print_network_summary": print_network_summary,
        "print_partial_training_losses": print_partial_training_losses,
        "debug_noise_function": debug_noise_function,
        "debug_loader_batch": debug_loader_batch,
        "debug_model_exporter": debug_model_exporter,
        "full_dataset_integrity_check": full_dataset_integrity_check,
        "full_dataset_distribution_check": full_dataset_distribution_check,
        "seeding_value": seeding_value,
        "optimise_hyperparameter": optimise_hyperparameter,
        "hyperparam_to_optimise": hyperparam_to_optimise,
        "set_optimisiation_list_manually": set_optimisiation_list_manually,
        "print_validation_results": print_validation_results,
        "plot_training_time": plot_training_time,
        "perf_analysis_num_files": perf_analysis_num_files,
        "perf_analysis_plot": perf_analysis_plot,
        "perf_analysis_dataset_dir": perf_analysis_dataset_dir,
        "debug_hpo_perf_analysis": debug_hpo_perf_analysis
    }

    # Save the settings dictionary to disk
    with open(filename, "w") as f:
        json.dump(settings_dict, f)

    return settings_dict